<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:task="http://www.springframework.org/schema/task" xmlns:rabbit="http://www.springframework.org/schema/rabbit"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
	    http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context 
		http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/rabbit
	    http://www.springframework.org/schema/rabbit/spring-rabbit.xsd
		http://www.springframework.org/schema/task
		http://www.springframework.org/schema/task/spring-task.xsd">

    <context:component-scan base-package="im"/>

    <!--<bean id="publisher" class="im.support.mq.Publisher"/>-->

    <!--配置文件加载开始-->
    <bean id="propertyPlaceholderConfigurer"
          class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="ignoreUnresolvablePlaceholders" value="true"/>
        <property name="locations">
            <list>
                <value>classpath*:properties/rabbit.properties</value>
                <value>classpath*:properties/systemconfig.properties</value>
                <value>classpath*:properties/redis.properties</value>
            </list>
        </property>
    </bean>

    <!--线程池初始化-->

    <bean id="threadPool" class="im.core.server.ThreadPool" init-method="init">
        <constructor-arg name="corePoolSize" value="${threadpool-corepoolsize}"/>
        <constructor-arg name="maxPoolSize" value="${threadpool-maximumpoolsize}"/>
        <constructor-arg name="keepAliveTime" value="${threadpool-keepalivetime}"/>
        <constructor-arg name="blockingQueueSize" value="${threadpool-blockingqueue}"/>
    </bean>
    <bean id="systemConfig" class="im.config.SystemConfig">
        <property name="idleReadTime" value="${idle-read}"/>
        <property name="idleWriteTime" value="${idle-write}"/>
        <property name="tcpPort" value="${tcp-port}"/>
        <property name="threadCorePoolSize" value="${sender-threadpool-poolsize}"/>
        <property name="threadKeepAliveTime" value="${threadpool-keepalivetime}"/>
        <property name="threadMaximumPoolSize" value="${threadpool-maximumpoolsize}"/>
        <property name="threadRetransFisrtTime" value="${threadpool-threadRetransTime}"/>
        <property name="threadRetransSecondTime" value="${threadpool-threadRetransTime}"/>
        <property name="threadRetransThirdTime" value="${threadpool-threadRetransTime}"/>
    </bean>
    <task:executor id="amqpConnectionTaskExecutor" pool-size="${rabbit.pool.size}"/>
    <!-- rabbit 连接工厂-->
    <rabbit:connection-factory
            id="connectionFactory"
            addresses="${rabbit.addresses}"
            virtual-host="${rabbit.host}"
            username="${rabbit.username}"
            password="${rabbit.password}"
            thread-factory="threadFactory"
            channel-cache-size="60"
            executor="amqpConnectionTaskExecutor"
    />
    <!-- 定义线程的名字 -->
    <bean id="threadFactory" class="org.springframework.scheduling.concurrent.CustomizableThreadFactory">
        <constructor-arg value="rabbitmq-"/>
    </bean>
    <!--
        交换机配置, 代码中手动绑定队列,这里无需设置
    -->
    <!-- MQ 管理, 队列 交换机 -->
    <rabbit:admin connection-factory="connectionFactory"/>
    <!-- 定义template start -->
    <!--
        定义template,在代码中手动指定交换机和队列
        reply-timeout : 为发送和接收操作超时,以毫秒为单位。默认是5000(5秒)。
        300000 : 最大5分钟后超时
    -->
    <rabbit:template id="amqpTemplate"
                     connection-factory="connectionFactory"
                     retry-template="retryTemplate"
                     reply-timeout="300000"
    />
    <!-- 添加重试功能 -->
    <bean id="retryTemplate" class="org.springframework.retry.support.RetryTemplate">
        <property name="backOffPolicy">
            <bean class="org.springframework.retry.backoff.ExponentialBackOffPolicy">
                <property name="initialInterval" value="500"/>
                <property name="multiplier" value="10.0"/>
                <property name="maxInterval" value="10000"/>
            </bean>
        </property>
    </bean>

    <!--Redis configure-->
    <bean id="jedisPool" class="redis.clients.jedis.JedisPool">
        <!--<constructor-arg name="poolConfig" value="org.apache.commons.pool2.impl.GenericObjectPoolConfig"/>-->
        <constructor-arg name="poolConfig" ref="redisPoolConfig"/>
        <constructor-arg name="host" value="${redis.host}"/>
        <constructor-arg name="port" value="${redis.port}"/>
        <constructor-arg name="timeout" value="${redis.timeout}"/>
        <!--<constructor-arg name="password" value="${redis.password}"/>-->
    </bean>

    <bean id="redisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">
        <property name="maxIdle" value="6"></property>
        <property name="minEvictableIdleTimeMillis" value="300000"></property>
        <property name="numTestsPerEvictionRun" value="3"></property>
        <property name="timeBetweenEvictionRunsMillis" value="60000"></property>
    </bean>


    <bean id="redisConnectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory"
          destroy-method="destroy">
        <property name="poolConfig" ref="redisPoolConfig"></property>
        <property name="hostName" value="${redis.host}"></property>
        <property name="port" value="${redis.port}"></property>
        <!--<property name="password" value="${redis.password}"/>-->
        <property name="database" value="0"></property>
        <property name="timeout" value="15000"></property>
        <property name="usePool" value="true"></property>
    </bean>

    <!-- 配置数据操作 -->
    <bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate">
        <property name="connectionFactory" ref="redisConnectionFactory"></property>
    </bean>
</beans>
